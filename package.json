{
    "name": "vscode-bazel",
    "displayName": "Bazel",
    "description": "Bazel BUILD integration",
    "version": "0.8.1",
    "publisher": "BazelBuild",
    "license": "Apache-2.0",
    "repository": {
        "type": "git",
        "url": "https://github.com/bazelbuild/vscode-bazel.git"
    },
    "icon": "media/bazel-logo.png",
    "engines": {
        "vscode": "^1.85.0"
    },
    "categories": [
        "Programming Languages"
    ],
    "activationEvents": [
        "onLanguage:starlark",
        "onView:bazelWorkspace",
        "onCommand:bazel.refreshBazelBuildTargets",
        "onCommand:bazel.getTargetOutput",
        "onCommand:bazel.info.bazel-bin",
        "onCommand:bazel.info.bazel-genfiles",
        "onCommand:bazel.info.bazel-testlogs",
        "onCommand:bazel.info.execution_root",
        "onCommand:bazel.info.output_base",
        "onCommand:bazel.info.output_path"
    ],
    "main": "./out/src/extension/extension",
    "contributes": {
        "breakpoints": [
            {
                "language": "starlark"
            }
        ],
        "commands": [
            {
                "category": "Bazel",
                "command": "bazel.buildTarget",
                "title": "Build Target"
            },
            {
                "category": "Bazel",
                "command": "bazel.buildTargetWithDebugging",
                "title": "Build Target with Starlark Debugger"
            },
            {
                "category": "Bazel",
                "command": "bazel.buildAll",
                "title": "Build Package"
            },
            {
                "category": "Bazel",
                "command": "bazel.runTarget",
                "title": "Run Target"
            },
            {
                "category": "Bazel",
                "command": "bazel.buildAllRecursive",
                "title": "Build Package Recursively"
            },
            {
                "category": "Bazel",
                "command": "bazel.testTarget",
                "title": "Test Target"
            },
            {
                "category": "Bazel",
                "command": "bazel.testAll",
                "title": "Test Package"
            },
            {
                "category": "Bazel",
                "command": "bazel.testAllRecursive",
                "title": "Test Package Recursively"
            },
            {
                "category": "Bazel",
                "command": "bazel.clean",
                "title": "Clean"
            },
            {
                "category": "Bazel",
                "command": "bazel.refreshBazelBuildTargets",
                "title": "Refresh Bazel Build Targets",
                "icon": {
                    "dark": "./icons/refresh-dark.svg",
                    "light": "./icons/refresh-light.svg"
                }
            },
            {
                "category": "Bazel",
                "command": "bazel.copyTargetToClipboard",
                "title": "Copy Label to Clipboard"
            },
            {
                "category": "Bazel",
                "command": "bazel.getTargetOutput",
                "title": "Get output path for the given target"
            },
            {
                "category": "Bazel",
                "command": "bazel.info.bazel-bin",
                "title": "Get bazel-bin value"
            },
            {
                "category": "Bazel",
                "command": "bazel.info.bazel-genfiles",
                "title": "Get bazel-genfiles value"
            },
            {
                "category": "Bazel",
                "command": "bazel.info.bazel-testlogs",
                "title": "Get bazel-testlogs value"
            },
            {
                "category": "Bazel",
                "command": "bazel.info.execution_root",
                "title": "Get Bazel execution_root value"
            },
            {
                "category": "Bazel",
                "command": "bazel.info.output_base",
                "title": "Get Bazel output_base value"
            },
            {
                "category": "Bazel",
                "command": "bazel.info.output_path",
                "title": "Get Bazel output_path value"
            },
            {
                "category": "Bazel",
                "command": "bazel.lsp.restart",
                "title": "Restart language server"
            }
        ],
        "configuration": {
            "type": "object",
            "title": "Bazel",
            "properties": {
                "bazel.executable": {
                    "type": "string",
                    "default": "",
                    "description": "The name of the Bazel executable. This may be an absolute path, or a simple name that will be searched for on the system path. If empty, \"bazel\" on the system path will be used.",
                    "scope": "machine-overridable"
                },
                "bazel.buildifierExecutable": {
                    "type": "string",
                    "default": "",
                    "markdownDescription": "The name of the Buildifier executable. This may be an absolute path, or a simple name that will be searched for on the system path. If empty, \"buildifier\" on the system path will be used.\n\nBuildifier can be downloaded from https://github.com/bazelbuild/buildtools/releases.",
                    "scope": "machine-overridable"
                },
                "bazel.buildifierFixOnFormat": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to automatically apply lint fixes from buildifier when formatting a Bazel file."
                },
                "bazel.queriesShareServer": {
                    "type": "boolean",
                    "default": true,
                    "description": "Use the same Bazel server for queries and builds. By default, vscode-bazel uses the same server for queries and builds in order to have it easier for the user to set up the plugin. However, you may experience degraded performance in Visual Studio Code for operations that require queries. You can disable this setting so that queries and builds can be executed in parallel. Keep in mind that you might get some errors after disabling this setting if you do not configure it properly. See https://github.com/bazelbuild/vscode-bazel/issues/265."
                },
                "bazel.queryOutputBase": {
                    "type": "string",
                    "default": null,
                    "description": "If queriesShareServer is false, this sets the directory in which bazel will create its output_base directory. Defaults to $TMPDIR."
                },
                "bazel.enableCodeLens": {
                    "type": "boolean",
                    "default": false,
                    "markdownDescription": "Whether to add a CodeLens to `BUILD`/`BUILD.bazel` files to provide actions while browsing the file."
                },
                "bazel.pathsToIgnore": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true,
                    "default": [],
                    "description": "A list of Regexs that when matched cause paths not to be checked for being in a WORKSPACE. This impacts operations that require a workspace, like queries, but syntax highlighting and buildifier work regardless."
                },
                "bazel.commandLine.startupOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true,
                    "default": [],
                    "markdownDescription": "A list of [Bazel startup options](https://docs.bazel.build/versions/master/command-line-reference.html#startup-options) to use when building, running tests, running queries, or cleaning. One option per entry, no shell escaping is needed."
                },
                "bazel.commandLine.commandArgs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true,
                    "default": [],
                    "markdownDescription": "A list of Bazel command line options to use when building or running tests. From the [common options](https://docs.bazel.build/versions/master/command-line-reference.html#options-common-to-all-commands) and [build options](https://docs.bazel.build/versions/master/command-line-reference.html#build) (`test` honors all `build` options). One option per entry, no shell escaping is needed."
                },
                "bazel.commandLine.queryExpression": {
                    "type": "string",
                    "default": "...:*",
                    "description": "A [query language expression](https://bazel.build/query/language) which determines the packages displayed in the workspace tree and quick picker. The default inspects the entire workspace, but you could narrow it. For example: `//part/you/want/...:*`"
                },
                "bazel.lsp.enabled": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable the LSP (experimental)"
                },
                "bazel.lsp.command": {
                    "type": "string",
                    "default": "starlark",
                    "description": "The executable to launch for the LSP"
                },
                "bazel.lsp.args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "--lsp",
                        "--bazel"
                    ],
                    "description": "The arguments to pass to the LSP executable"
                }
            }
        },
        "debuggers": [
            {
                "type": "bazel-launch-build",
                "label": "Launch Bazel Build",
                "program": "./out/src/debug-adapter/client.js",
                "runtime": "node",
                "configurationAttributes": {
                    "launch": {
                        "properties": {
                            "args": {
                                "type": "array",
                                "description": "Target labels and other command line options passed to the 'bazel build' command.",
                                "default": []
                            },
                            "bazelCommand": {
                                "type": "string",
                                "description": "The Bazel command to execute (e.g., build, test, etc.). Defaults to \"build\".",
                                "default": "build"
                            },
                            "bazelExecutablePath": {
                                "type": "string",
                                "description": "The name of the Bazel executable. This may be an absolute path, or a simple name that will be searched for on the system path. If empty, \"bazel\" on the system path will be used.",
                                "default": ""
                            },
                            "cwd": {
                                "type": "string",
                                "description": "The working directory in which Bazel will be launched.",
                                "default": ""
                            },
                            "port": {
                                "type": "number",
                                "description": "The port number of the Bazel debug server.",
                                "default": 7300
                            },
                            "verbose": {
                                "type": "boolean",
                                "description": "Show verbose logs for the debugger.",
                                "default": false
                            }
                        },
                        "required": [
                            "args",
                            "cwd"
                        ]
                    }
                }
            }
        ],
        "grammars": [
            {
                "language": "starlark",
                "scopeName": "source.starlark",
                "path": "./syntaxes/starlark.tmLanguage.json"
            }
        ],
        "languages": [
            {
                "id": "starlark",
                "aliases": [
                    "Starlark",
                    "starlark",
                    "Bazel"
                ],
                "extensions": [
                    ".BUILD",
                    ".WORKSPACE",
                    ".bazel",
                    ".bzl",
                    ".bzlmod",
                    ".sky",
                    ".star"
                ],
                "filenames": [
                    "BUILD",
                    "WORKSPACE"
                ],
                "configuration": "./syntaxes/starlark.configuration.json"
            }
        ],
        "menus": {
            "commandPalette": [
                {
                    "command": "bazel.copyTargetToClipboard",
                    "when": "false"
                },
                {
                    "command": "bazel.buildTarget",
                    "when": "vscodeBazelHaveBazelWorkspace"
                },
                {
                    "command": "bazel.buildTargetWithDebugging",
                    "when": "vscodeBazelHaveBazelWorkspace"
                },
                {
                    "command": "bazel.buildAll",
                    "when": "vscodeBazelHaveBazelWorkspace"
                },
                {
                    "command": "bazel.buildAllRecursive",
                    "when": "vscodeBazelHaveBazelWorkspace"
                },
                {
                    "command": "bazel.runTarget",
                    "when": "vscodeBazelHaveBazelWorkspace"
                },
                {
                    "command": "bazel.testTarget",
                    "when": "vscodeBazelHaveBazelWorkspace"
                },
                {
                    "command": "bazel.testAll",
                    "when": "vscodeBazelHaveBazelWorkspace"
                },
                {
                    "command": "bazel.testAllRecursive",
                    "when": "vscodeBazelHaveBazelWorkspace"
                },
                {
                    "command": "bazel.clean",
                    "when": "vscodeBazelHaveBazelWorkspace"
                }
            ],
            "view/item/context": [
                {
                    "command": "bazel.buildTarget",
                    "when": "view == bazelWorkspace && viewItem == rule",
                    "group": "build"
                },
                {
                    "command": "bazel.buildTarget",
                    "when": "view == bazelWorkspace && viewItem == testRule",
                    "group": "build"
                },
                {
                    "command": "bazel.buildTargetWithDebugging",
                    "when": "view == bazelWorkspace && viewItem == rule",
                    "group": "build"
                },
                {
                    "command": "bazel.buildTargetWithDebugging",
                    "when": "view == bazelWorkspace && viewItem == testRule",
                    "group": "build"
                },
                {
                    "command": "bazel.buildAll",
                    "when": "view == bazelWorkspace && viewItem == package",
                    "group": "build"
                },
                {
                    "command": "bazel.buildAllRecursive",
                    "when": "view == bazelWorkspace && viewItem == package",
                    "group": "build"
                },
                {
                    "command": "bazel.runTarget",
                    "when": "view == bazelWorkspace && viewItem == rule",
                    "group": "build"
                },
                {
                    "command": "bazel.testTarget",
                    "when": "view == bazelWorkspace && viewItem == testRule",
                    "group": "build"
                },
                {
                    "command": "bazel.testAll",
                    "when": "view == bazelWorkspace && viewItem == package",
                    "group": "build"
                },
                {
                    "command": "bazel.testAllRecursive",
                    "when": "view == bazelWorkspace && viewItem == package",
                    "group": "build"
                },
                {
                    "command": "bazel.copyTargetToClipboard",
                    "when": "view == bazelWorkspace && viewItem == rule",
                    "group": "build"
                },
                {
                    "command": "bazel.copyTargetToClipboard",
                    "when": "view == bazelWorkspace && viewItem == testRule",
                    "group": "build"
                }
            ],
            "view/title": [
                {
                    "command": "bazel.refreshBazelBuildTargets",
                    "when": "view == bazelWorkspace",
                    "group": "navigation"
                }
            ]
        },
        "taskDefinitions": [
            {
                "type": "bazel",
                "required": [
                    "command",
                    "targets"
                ],
                "properties": {
                    "command": {
                        "type": "string",
                        "description": "The Bazel command to execute (\"build\" or \"test\")."
                    },
                    "targets": {
                        "type": "array",
                        "description": "The labels of the targets to build or test."
                    }
                }
            }
        ],
        "views": {
            "explorer": [
                {
                    "id": "bazelWorkspace",
                    "name": "Bazel Build Targets",
                    "when": "vscodeBazelHaveBazelWorkspace"
                }
            ]
        }
    },
    "scripts": {
        "check-lint": "eslint src/**/*.ts --ext .ts --config .eslintrc.js --ignore-pattern 'src/**/*.d.ts' --format stylish",
        "compile": "./scripts/build.sh",
        "watch": "./scripts/build.sh -watch"
    },
    "devDependencies": {
        "@bufbuild/protoc-gen-es": "^1.7.2",
        "@connectrpc/protoc-gen-connect-es": "^1.3.0",
        "@types/long": "^4.0.0",
        "@types/node": "^16.11.7",
        "@types/vscode": "^1.85.0",
        "@types/which": "^3.0.3",
        "@typescript-eslint/eslint-plugin": "^6.13.1",
        "@typescript-eslint/parser": "^6.13.1",
        "@vscode/vsce": "^2.23.0",
        "eslint": "^8.54.0",
        "eslint-config-prettier": "^9.0.0",
        "eslint-plugin-jsdoc": "^46.9.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "typescript": "^5.3.3",
        "vscode-test": "^1.3.0"
    },
    "dependencies": {
        "@bufbuild/protobuf": "^1.7.2",
        "vscode-debugadapter": "^1.37.1",
        "vscode-debugprotocol": "^1.37.0",
        "vscode-languageclient": "^9.0.1",
        "vscode-uri": "^3.0.2",
        "which": "^4.0.0"
    }
}