{
    "name": "vscode-bazel",
    "displayName": "Bazel (Wix)",
    "description": "Bazel BUILD integration at Wix",
    "version": "0.11.0",
    "publisher": "BazelBuild",
    "license": "Apache-2.0",
    "repository": {
        "type": "git",
        "url": "https://github.com/bazelbuild/vscode-bazel.git"
    },
    "icon": "media/bazel-logo.png",
    "engines": {
        "vscode": "^1.88.0"
    },
    "categories": [
        "Programming Languages"
    ],
    "activationEvents": [
        "workspaceContains:**/BUILD",
        "workspaceContains:**/WORKSPACE",
        "workspaceContains:**/WORKSPACE.bazel",
        "workspaceContains:**/MODULE.bazel",
        "workspaceContains:**/REPO.bazel",
        "workspaceContains:.vscwb/.bazelproject",
        "onCommand:bazel.pickPackage",
        "onCommand:bazel.pickTarget",
        "onCommand:bazel.getTargetOutput",
        "onCommand:bazel.info.bazel-bin",
        "onCommand:bazel.info.bazel-genfiles",
        "onCommand:bazel.info.bazel-testlogs",
        "onCommand:bazel.info.execution_root",
        "onCommand:bazel.info.output_base",
        "onCommand:bazel.info.output_path",
        "onCommand:bazel.info.workspace"
    ],
    "main": "./out/src/extension/extension",
    "contributes": {
        "breakpoints": [
            {
                "language": "starlark"
            }
        ],
        "commands": [
            {
                "category": "Bazel",
                "command": "bazel.buildTarget",
                "title": "Build Target"
            },
            {
                "category": "Bazel",
                "command": "bazel.buildTargetWithDebugging",
                "title": "Build Target with Starlark Debugger"
            },
            {
                "category": "Bazel",
                "command": "bazel.buildAll",
                "title": "Build Package"
            },
            {
                "category": "Bazel",
                "command": "bazel.runTarget",
                "title": "Run Target"
            },
            {
                "category": "Bazel",
                "command": "bazel.buildAllRecursive",
                "title": "Build Package Recursively"
            },
            {
                "category": "Bazel",
                "command": "bazel.testTarget",
                "title": "Test Target"
            },
            {
                "category": "Bazel",
                "command": "bazel.testAll",
                "title": "Test Package"
            },
            {
                "category": "Bazel",
                "command": "bazel.testAllRecursive",
                "title": "Test Package Recursively"
            },
            {
                "category": "Bazel",
                "command": "bazel.clean",
                "title": "Clean"
            },
            {
                "category": "Bazel",
                "command": "bazel.refreshBazelBuildTargets",
                "title": "Refresh Bazel Build Targets",
                "icon": {
                    "dark": "./icons/refresh-dark.svg",
                    "light": "./icons/refresh-light.svg"
                }
            },
            {
                "category": "Bazel",
                "command": "bazel.copyTargetToClipboard",
                "title": "Copy Label to Clipboard"
            },
            {
                "category": "Bazel",
                "command": "bazel.lsp.restart",
                "title": "Restart language server",
                "when": "bazel.lsp.enabled"
            },
            {
                "category": "Bazel",
                "command": "bazel.buildCurrentFile",
                "title": "Build Current File"
            },
            {
                "category": "Bazel",
                "command": "bazel.buildFromHistory",
                "title": "Build from History"
            },
            {
                "category": "Bazel",
                "command": "bazel.clearBuildHistory",
                "title": "Clear Build History"
            },
            {
                "category": "Bazel",
                "command": "bazel.openProjectViewFile",
                "title": "Open Project View File"
            },
            {
                "category": "Bazel",
                "command": "bazel.refreshProjectView",
                "title": "Refresh Project View"
            },
            {
                "category": "Bazel",
                "command": "bazel.createProjectViewFile",
                "title": "Create Project View File"
            },
            {
                "category": "Bazel",
                "command": "bazel.buildProjectViewTargets",
                "title": "Build Project View Targets"
            },
            {
                "category": "Bazel",
                "command": "bazel.buildCurrentFileIfInProjectView",
                "title": "Build Current File (Project View)"
            },
            {
                "category": "Bazel",
                "command": "bazel.resolveProjectViewTargets",
                "title": "Resolve Project View Targets"
            },
            {
                "category": "Bazel",
                "command": "bazel.showProjectViewStats",
                "title": "Show Project View Statistics"
            },
            {
                "category": "Bazel",
                "command": "bazel.findProjectViewTargets",
                "title": "Find Project View Targets"
            },
            {
                "category": "Bazel",
                "command": "bazel.enableDirectoryFiltering",
                "title": "Enable Directory Filtering"
            },
            {
                "category": "Bazel",
                "command": "bazel.disableDirectoryFiltering",
                "title": "Disable Directory Filtering"
            },
            {
                "category": "Bazel",
                "command": "bazel.showDirectoryFilterStats",
                "title": "Show Directory Filter Statistics"
            },
            {
                "category": "Bazel",
                "command": "bazel.refreshDirectoryFilter",
                "title": "Refresh Directory Filter"
            },
            {
                "category": "Bazel",
                "command": "bazel.toggleStatusBar",
                "title": "Toggle Status Bar Indicators"
            },
            {
                "category": "Bazel",
                "command": "bazel.showProjectViewDashboard",
                "title": "Show Project View Dashboard"
            }
        ],
        "configuration": {
            "type": "object",
            "title": "Bazel",
            "properties": {
                "bazel.executable": {
                    "type": "string",
                    "default": "",
                    "description": "The name of the Bazel executable. This may be an absolute path, or a simple name that will be searched for on the system path. If empty, \"bazel\" on the system path will be used.",
                    "scope": "machine-overridable"
                },
                "bazel.buildifierExecutable": {
                    "type": "string",
                    "default": "",
                    "markdownDescription": "The name of the Buildifier executable. This may be an absolute path, or a simple name that will be searched for on the system path. Paths starting with `@` are interpreted as Bazel targets and are run via `bazel run`. If empty, \"buildifier\" on the system path will be used.\n\nBuildifier can be downloaded from https://github.com/bazelbuild/buildtools/releases.",
                    "scope": "machine-overridable"
                },
                "bazel.buildifierConfigJsonPath": {
                    "type": "string",
                    "default": "",
                    "markdownDescription": "The path of the Buildifier config json file, ex: `.buildifier.json`. This may be an absolute path, or a relative path within the workspace. If this option is unset, `buildifier` will automatically look for a `.buildifier.json` file in the workspace.",
                    "scope": "machine-overridable"
                },
                "bazel.buildifierFixOnFormat": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to automatically apply lint fixes from buildifier when formatting a Bazel file."
                },
                "bazel.queriesShareServer": {
                    "type": "boolean",
                    "default": "true",
                    "description": "Use the same Bazel server for queries and builds. By default, vscode-bazel uses the same server for queries and builds to make sure this extension works out-of-the-box. However, you may experience degraded performance in Visual Studio Code for operations that require queries. You can disable this setting so that queries and builds can be executed in parallel in some circumstances. See https://github.com/bazelbuild/vscode-bazel?tab=readme-ov-file#using-a-separate-output-base for more information."
                },
                "bazel.queryOutputBase": {
                    "type": "string",
                    "default": null,
                    "description": "If queriesShareServer is false, this sets the directory in which bazel will create its output_base directory. Defaults to $TMPDIR."
                },
                "bazel.enableCodeLens": {
                    "type": "boolean",
                    "default": false,
                    "markdownDescription": "Whether to add a CodeLens to `BUILD`/`BUILD.bazel` files to provide actions while browsing the file."
                },
                "bazel.pathsToIgnore": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true,
                    "default": [],
                    "description": "A list of Regexs that when matched cause paths not to be checked for being in a WORKSPACE. This impacts operations that require a workspace, like queries, but syntax highlighting and buildifier work regardless."
                },
                "bazel.commandLine.startupOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true,
                    "default": [],
                    "markdownDescription": "A list of [Bazel startup options](https://docs.bazel.build/versions/master/command-line-reference.html#startup-options) to use when building, running tests, running queries, or cleaning. One option per entry, no shell escaping is needed."
                },
                "bazel.commandLine.commandArgs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true,
                    "default": [],
                    "markdownDescription": "A list of Bazel command line options to use when building or running tests. From the [common options](https://docs.bazel.build/versions/master/command-line-reference.html#options-common-to-all-commands) and [build options](https://docs.bazel.build/versions/master/command-line-reference.html#build) (`test` honors all `build` options). One option per entry, no shell escaping is needed."
                },
                "bazel.commandLine.queryExpression": {
                    "type": "string",
                    "default": "...:*",
                    "description": "A [query language expression](https://bazel.build/query/language) which determines the packages displayed in the workspace tree and quick picker. The default inspects the entire workspace, but you could narrow it. For example: `//part/you/want/...:*`"
                },
                "bazel.lsp.command": {
                    "type": "string",
                    "default": "",
                    "description": "The executable to launch for the LSP (experimental). Providing this disables certain features in the extension on the basis that they'll be provided by this language server."
                },
                "bazel.lsp.args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [],
                    "description": "The arguments to pass to the LSP executable"
                },
                "bazel.lsp.env": {
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Environment variables to pass to the LSP executable"
                },
                "bazel.trace.server": {
                    "type": "string",
                    "enum": [
                        "off",
                        "messages",
                        "verbose"
                    ],
                    "default": "off",
                    "description": "Trace the communication between VS Code and Bazel LSP server (language server)."
                },
                "bazel.buildIcon.enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to show the Bazel build icon in the status bar for quick file building."
                },
                "bazel.buildIcon.showSuccessNotifications": {
                    "type": "boolean",
                    "default": true,
                    "description": "Show notification when build completes successfully"
                },
                "bazel.buildIcon.showErrorNotifications": {
                    "type": "boolean",
                    "default": true,
                    "description": "Show notification when build fails"
                },
                "bazel.buildIcon.targetSelectionMode": {
                    "type": "string",
                    "enum": [
                        "auto",
                        "manual",
                        "prompt"
                    ],
                    "default": "auto",
                    "description": "How to select build targets: auto-detect, manual selection, or prompt user"
                },
                "bazel.buildIcon.showTerminalOnBuild": {
                    "type": "boolean",
                    "default": false,
                    "description": "Automatically show terminal output when build starts"
                },
                "bazel.buildIcon.enableTargetHistory": {
                    "type": "boolean",
                    "default": true,
                    "description": "Track and provide quick access to recently built targets"
                },
                "bazel.buildIcon.maxHistoryItems": {
                    "type": "number",
                    "default": 10,
                    "minimum": 1,
                    "maximum": 50,
                    "description": "Maximum number of targets to keep in build history"
                },
                "bazel.buildIcon.enableCacheStatus": {
                    "type": "boolean",
                    "default": false,
                    "description": "Show build cache status information (experimental)"
                },
                "bazel.buildIcon.customCommands": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Display name for the command"
                            },
                            "command": {
                                "type": "string",
                                "enum": [
                                    "build",
                                    "test",
                                    "run"
                                ],
                                "description": "Bazel command to execute"
                            },
                            "args": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "Additional arguments for the command"
                            }
                        },
                        "required": [
                            "name",
                            "command"
                        ]
                    },
                    "default": [],
                    "description": "Custom Bazel commands available in the build icon menu"
                },
                "bazel.buildIcon.enableTelemetry": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable anonymous usage analytics to help improve the extension"
                },
                "bazel.directoryFilter.enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable directory filtering based on project view configuration to improve performance in large repositories"
                },
                "bazel.directoryFilter.showExcluded": {
                    "type": "boolean",
                    "default": false,
                    "description": "Show excluded directories with visual indicators instead of hiding them completely"
                },
                "bazel.directoryFilter.maxDepth": {
                    "type": "number",
                    "default": 10,
                    "minimum": 1,
                    "maximum": 50,
                    "description": "Maximum directory depth to scan for performance optimization"
                },
                "bazel.directoryFilter.alwaysInclude": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        ".vscode",
                        ".vscwb",
                        "WORKSPACE",
                        "WORKSPACE.bazel",
                        "MODULE.bazel"
                    ],
                    "description": "Directories to always include regardless of project view configuration"
                },
                "bazel.directoryFilter.performanceExcludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "**/node_modules",
                        "**/bazel-*",
                        "**/.git",
                        "**/build",
                        "**/dist",
                        "**/out"
                    ],
                    "description": "File patterns to always exclude for performance (supports glob patterns)"
                },
                "bazel.statusBar.enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable status bar indicators for project view and directory filtering"
                },
                "bazel.statusBar.showPerformanceMetrics": {
                    "type": "boolean",
                    "default": true,
                    "description": "Show performance metrics in the status bar when directory filtering is active"
                },
                "bazel.statusBar.showFilterRecommendations": {
                    "type": "boolean",
                    "default": true,
                    "description": "Show directory filtering recommendations in the status bar"
                }
            }
        },
        "debuggers": [
            {
                "type": "bazel-launch-build",
                "label": "Launch Bazel Build",
                "program": "./out/src/debug-adapter/client.js",
                "runtime": "node",
                "configurationAttributes": {
                    "launch": {
                        "properties": {
                            "args": {
                                "type": "array",
                                "description": "Target labels and other command line options passed to the 'bazel build' command.",
                                "default": []
                            },
                            "bazelCommand": {
                                "type": "string",
                                "description": "The Bazel command to execute (e.g., build, test, etc.). Defaults to \"build\".",
                                "default": "build"
                            },
                            "bazelExecutablePath": {
                                "type": "string",
                                "description": "The name of the Bazel executable. This may be an absolute path, or a simple name that will be searched for on the system path. If empty, \"bazel\" on the system path will be used.",
                                "default": ""
                            },
                            "cwd": {
                                "type": "string",
                                "description": "The working directory in which Bazel will be launched.",
                                "default": ""
                            },
                            "port": {
                                "type": "number",
                                "description": "The port number of the Bazel debug server.",
                                "default": 7300
                            },
                            "verbose": {
                                "type": "boolean",
                                "description": "Show verbose logs for the debugger.",
                                "default": false
                            }
                        },
                        "required": [
                            "args",
                            "cwd"
                        ]
                    }
                }
            }
        ],
        "grammars": [
            {
                "language": "bazelrc",
                "scopeName": "source.bazelrc",
                "path": "./syntaxes/bazelrc.tmLanguage.json"
            },
            {
                "language": "starlark",
                "scopeName": "source.starlark",
                "path": "./syntaxes/starlark.tmLanguage.json"
            }
        ],
        "languages": [
            {
                "id": "bazelrc",
                "extensions": [
                    ".bazelrc"
                ],
                "filenames": [
                    ".bazelrc",
                    "bazel.rc"
                ],
                "configuration": "./syntaxes/bazelrc.configuration.json"
            },
            {
                "id": "starlark",
                "aliases": [
                    "Starlark",
                    "starlark",
                    "Bazel"
                ],
                "extensions": [
                    ".BUILD",
                    ".WORKSPACE",
                    ".bazel",
                    ".bzl",
                    ".bzlmod",
                    ".sky",
                    ".star"
                ],
                "filenames": [
                    "BUILD",
                    "WORKSPACE"
                ],
                "configuration": "./syntaxes/starlark.configuration.json"
            }
        ],
        "menus": {
            "editor/context": [
                {
                    "when": "bazel.haveWorkspace",
                    "command": "bazel.buildCurrentFile",
                    "group": "bazel"
                }
            ],
            "commandPalette": [
                {
                    "command": "bazel.copyTargetToClipboard",
                    "when": "false"
                },
                {
                    "command": "bazel.buildTarget",
                    "when": "bazel.haveWorkspace"
                },
                {
                    "command": "bazel.buildTargetWithDebugging",
                    "when": "bazel.haveWorkspace"
                },
                {
                    "command": "bazel.buildAll",
                    "when": "bazel.haveWorkspace"
                },
                {
                    "command": "bazel.buildAllRecursive",
                    "when": "bazel.haveWorkspace"
                },
                {
                    "command": "bazel.runTarget",
                    "when": "bazel.haveWorkspace"
                },
                {
                    "command": "bazel.testTarget",
                    "when": "bazel.haveWorkspace"
                },
                {
                    "command": "bazel.testAll",
                    "when": "bazel.haveWorkspace"
                },
                {
                    "command": "bazel.testAllRecursive",
                    "when": "bazel.haveWorkspace"
                },
                {
                    "command": "bazel.clean",
                    "when": "bazel.haveWorkspace"
                },
                {
                    "command": "bazel.openProjectViewFile",
                    "when": "bazel.haveWorkspace"
                },
                {
                    "command": "bazel.refreshProjectView",
                    "when": "bazel.hasProjectView"
                },
                {
                    "command": "bazel.createProjectViewFile",
                    "when": "bazel.haveWorkspace"
                },
                {
                    "command": "bazel.buildProjectViewTargets",
                    "when": "bazel.hasProjectView"
                },
                {
                    "command": "bazel.buildCurrentFileIfInProjectView",
                    "when": "bazel.hasProjectView"
                },
                {
                    "command": "bazel.resolveProjectViewTargets",
                    "when": "bazel.hasProjectView"
                },
                {
                    "command": "bazel.showProjectViewStats",
                    "when": "bazel.hasProjectView"
                },
                {
                    "command": "bazel.findProjectViewTargets",
                    "when": "bazel.hasProjectView"
                },
                {
                    "command": "bazel.enableDirectoryFiltering",
                    "when": "bazel.haveWorkspace"
                },
                {
                    "command": "bazel.disableDirectoryFiltering",
                    "when": "bazel.haveWorkspace"
                },
                {
                    "command": "bazel.showDirectoryFilterStats",
                    "when": "bazel.haveWorkspace"
                },
                {
                    "command": "bazel.refreshDirectoryFilter",
                    "when": "bazel.hasProjectView"
                },
                {
                    "command": "bazel.toggleStatusBar",
                    "when": "bazel.haveWorkspace"
                },
                {
                    "command": "bazel.showProjectViewDashboard",
                    "when": "bazel.hasProjectView"
                }
            ],
            "view/item/context": [
                {
                    "command": "bazel.buildTarget",
                    "when": "view == bazelWorkspace && viewItem == rule",
                    "group": "build"
                },
                {
                    "command": "bazel.buildTarget",
                    "when": "view == bazelWorkspace && viewItem == testRule",
                    "group": "build"
                },
                {
                    "command": "bazel.buildTargetWithDebugging",
                    "when": "view == bazelWorkspace && viewItem == rule",
                    "group": "build"
                },
                {
                    "command": "bazel.buildTargetWithDebugging",
                    "when": "view == bazelWorkspace && viewItem == testRule",
                    "group": "build"
                },
                {
                    "command": "bazel.buildAll",
                    "when": "view == bazelWorkspace && viewItem == package",
                    "group": "build"
                },
                {
                    "command": "bazel.buildAllRecursive",
                    "when": "view == bazelWorkspace && viewItem == package",
                    "group": "build"
                },
                {
                    "command": "bazel.runTarget",
                    "when": "view == bazelWorkspace && viewItem == rule",
                    "group": "build"
                },
                {
                    "command": "bazel.testTarget",
                    "when": "view == bazelWorkspace && viewItem == testRule",
                    "group": "build"
                },
                {
                    "command": "bazel.testAll",
                    "when": "view == bazelWorkspace && viewItem == package",
                    "group": "build"
                },
                {
                    "command": "bazel.testAllRecursive",
                    "when": "view == bazelWorkspace && viewItem == package",
                    "group": "build"
                },
                {
                    "command": "bazel.copyTargetToClipboard",
                    "when": "view == bazelWorkspace && viewItem == rule",
                    "group": "build"
                },
                {
                    "command": "bazel.copyTargetToClipboard",
                    "when": "view == bazelWorkspace && viewItem == testRule",
                    "group": "build"
                }
            ],
            "view/title": [
                {
                    "command": "bazel.refreshBazelBuildTargets",
                    "when": "view == bazelWorkspace",
                    "group": "navigation"
                }
            ]
        },
        "keybindings": [
            {
                "command": "bazel.buildCurrentFile",
                "key": "ctrl+shift+b",
                "mac": "cmd+shift+b",
                "when": "bazel.haveWorkspace"
            }
        ],
        "taskDefinitions": [
            {
                "type": "bazel",
                "when": "shellExecutionSupported",
                "required": [
                    "command",
                    "targets"
                ],
                "properties": {
                    "command": {
                        "description": "The Bazel command to execute (\"build\" or \"test\").",
                        "type": "string",
                        "enum": [
                            "build",
                            "run",
                            "test",
                            "coverage",
                            "clean"
                        ]
                    },
                    "targets": {
                        "description": "The labels of the targets to build or test.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "options": {
                        "description": "Additional command line parameters to pass to Bazel.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        ],
        "views": {
            "explorer": [
                {
                    "id": "bazelWorkspace",
                    "name": "Bazel Targets",
                    "when": "bazel.haveWorkspace"
                }
            ]
        },
        "viewsWelcome": [
            {
                "view": "bazelWorkspace",
                "contents": "No Bazel targets found.\n[Refresh Target List](command:bazel.refreshBazelBuildTargets)",
                "when": "bazel.haveWorkspace"
            }
        ],
        "iconThemes": [
            {
                "id": "bazel-build-icons",
                "label": "Bazel BUILD Icons",
                "path": "./icons/bazel-build-icon-theme.json"
            }
        ]
    },
    "scripts": {
        "check-lint": "eslint .",
        "compile": "./scripts/build.sh",
        "pretest": "./scripts/build.sh",
        "format-check": "prettier --check .",
        "format-fix": "prettier --write .",
        "test": "./scripts/test.sh",
        "test:integration": "./scripts/test.sh --grep \"Integration\"",
        "test:smoke": "./scripts/test.sh --grep \"smoke\"",
        "test:coverage": "./scripts/test.sh --coverage",
        "package": "vsce package",
        "update-snapshot": "./scripts/test.sh -u",
        "vscode:prepublish": "./scripts/build.sh",
        "watch": "./scripts/build.sh -watch"
    },
    "devDependencies": {
        "@types/mocha": "^10.0.6",
        "@types/node": "^16.11.7",
        "@types/sinon": "^10.0.16",
        "@types/vscode": "^1.88.0",
        "@types/which": "^3.0.3",
        "@vscode/test-cli": "^0.0.9",
        "@vscode/test-electron": "^2.3.9",
        "@vscode/vsce": "^2.24.0",
        "eslint": "^8.57.0",
        "eslint-config-prettier": "^9.1.0",
        "eslint-plugin-jsdoc": "^48.2.2",
        "js-yaml": "^4.1.0",
        "mocha": "^10.8.2",
        "prettier": "^3.2.5",
        "sinon": "^15.2.0",
        "typescript": "^5.4.4",
        "typescript-eslint": "^7.5.0",
        "vscode-tmgrammar-test": "^0.1.3"
    },
    "dependencies": {
        "protobufjs": "^6.8.0",
        "vscode-debugadapter": "^1.37.1",
        "vscode-debugprotocol": "^1.37.0",
        "vscode-languageclient": "^9.0.1",
        "vscode-uri": "^3.0.2",
        "which": "^4.0.0"
    }
}