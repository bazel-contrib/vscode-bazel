name: Deploy VS Code Extension

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

permissions:
  contents: read
  id-token: write

jobs:
  test:
    name: Test Extension
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [16, 18, 20]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run check-lint

    - name: Run format check
      run: npm run format-check

    - name: Compile TypeScript
      run: npm run compile

    - name: Run unit tests
      run: npm test

    - name: Run integration tests
      run: npm run test:integration
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '18'

    - name: Package extension
      run: npm run package

    - name: Upload extension artifact
      uses: actions/upload-artifact@v4
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '18'
      with:
        name: vscode-bazel-extension
        path: '*.vsix'

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Run dependency vulnerability scan
      uses: actions/dependency-review-action@v4
      if: github.event_name == 'pull_request'

  pre-release:
    name: Pre-release Testing
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download extension artifact
      uses: actions/download-artifact@v4
      with:
        name: vscode-bazel-extension

    - name: Install extension for testing
      run: |
        code --install-extension *.vsix --force
      continue-on-error: true

    - name: Run smoke tests
      run: npm run test:smoke
      continue-on-error: true

  release:
    name: Release Extension
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download extension artifact
      uses: actions/download-artifact@v4
      with:
        name: vscode-bazel-extension

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Validate version consistency
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        if [ "$PACKAGE_VERSION" != "${{ steps.version.outputs.VERSION }}" ]; then
          echo "Version mismatch: package.json has $PACKAGE_VERSION, tag is ${{ steps.version.outputs.VERSION }}"
          exit 1
        fi

    - name: Generate release notes
      id: release_notes
      run: |
        # Extract changes for current version from CHANGELOG.md
        sed -n "/^## \[${{ steps.version.outputs.VERSION }}\]/,/^## \[/p" CHANGELOG.md | head -n -1 > release_notes.md
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Publish to VS Code Marketplace
      run: npx vsce publish --pat ${{ secrets.VSCE_TOKEN }} --packagePath *.vsix
      env:
        VSCE_TOKEN: ${{ secrets.VSCE_TOKEN }}

    - name: Publish to Open VSX Registry
      run: npx ovsx publish --pat ${{ secrets.OVSX_TOKEN }} --packagePath *.vsix
      env:
        OVSX_TOKEN: ${{ secrets.OVSX_TOKEN }}
      continue-on-error: true

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.version.outputs.VERSION }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        draft: false
        prerelease: false

    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: *.vsix
        asset_name: vscode-bazel-${{ steps.version.outputs.VERSION }}.vsix
        asset_content_type: application/zip

  post-deployment:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Wait for marketplace propagation
      run: sleep 300 # Wait 5 minutes for marketplace to update

    - name: Verify marketplace publication
      run: |
        # Check if extension is available on marketplace
        curl -f "https://marketplace.visualstudio.com/items?itemName=BazelBuild.vscode-bazel" || exit 1

    - name: Setup monitoring alerts
      run: |
        # Configure monitoring for new release
        echo "Setting up post-deployment monitoring..."
        # This would integrate with actual monitoring services

    - name: Notify team of successful deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#bazel-vscode'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Get previous stable version
      id: prev_version
      run: |
        # Find previous stable release
        PREV_VERSION=$(git tag --sort=-version:refname | grep '^v' | head -2 | tail -1)
        echo "PREV_VERSION=${PREV_VERSION#v}" >> $GITHUB_OUTPUT

    - name: Checkout previous version
      run: git checkout ${{ steps.prev_version.outputs.PREV_VERSION }}

    - name: Package previous version
      run: npm run package

    - name: Republish previous version
      run: npx vsce publish --pat ${{ secrets.VSCE_TOKEN }} --packagePath *.vsix
      env:
        VSCE_TOKEN: ${{ secrets.VSCE_TOKEN }}

    - name: Notify team of rollback
      uses: 8398a7/action-slack@v3
      with:
        status: 'warning'
        channel: '#bazel-vscode'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: "ðŸš¨ Emergency rollback to version ${{ steps.prev_version.outputs.PREV_VERSION }} completed" 